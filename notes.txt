
                Job

    Spring Batch at the most fundamental level is a state machine.
    A job defines the flow at processing will take through those states.
    So each step represents a state within the state machine. So the job defines the list of states and how to
    transition from one state to the next.

                Step

    A step represents an independent peace of processing that makes a job. A job may have many steps.
    There are two different types of steps:

                Tasklet

    This is a single interface with a single method called execute(). And what Spring Batch does is that it runs
    a single method within a scope of a transaction. You cam put whatever code you want within that, anything
    outside of item based processing.

                Chunk

    Chunk based processing is the other type of step that is available within Spring Batch.
    A chunk based step is item based. So when we look at a chunk based step we expect to be processed items individually.
    Within this type of step there are 3 main components:

        ItemReader
        ItemProcessor (optional)
        ItemWriter

        Step 1      ->     Step 2      ->     Step 2

    ItemReader          ItemReader          ItemReader
    ItemProcessor       ItemProcessor       ItemProcessor
    ItemWriter          ItemWriter          ItemWriter

    First, Step1 will start and finish, then Step2 will start and finish, ...

                        ItemReader          ItemProcessor       ItemWriter
    for each chunk:         |                     |                 |
                          read()                  |                 |
                            |--------------->  process()            |
                            |                     |------------>  write()
                            |                     |                 |

    The reader is going to read until a chunk limit. So typically you configure a chunk size.
    For example, you plan to process 1000 records. Then the ItemProcessor process those 1000 records,
    and then the writer writes them. This process is repeated until the input is exhausted.

        JobLauncher ------- Job ------ Step ------|------ ItemReader
              |______________|___________|        |------ ItemProcessor
                             |                    |------ ItemWriter
                         JobRepository

    Spring Batch uses Map based repository or JDBC based repository.
    If we don't specify the resource, Spring Batch will use an in-memory repository (a Map based one)

               Listeners

    Listeners functionality is implemented by implementing an appropriate interface and than adding the implementation
    to jobs and steps. Each of the interfaces also has a Support Class (for simplification).

        1. JobExecutionListener - which provides before and after job listeners

        2. StepExecutionListener - which provides before and after step capabilities

        3. ChunkListener - which provides before and after chunk as well as onError

        4. ItemReadListener

        5. ItemProcessListener

        6. ItemWriteListener

            (these all are provide before and after each items interaction with an appropriate component)

                Listener Annotations

    Annotations allows you write POJOs instead of implementing Spring Batch interfaces

    @BeforeStep, @AfterStep, @BeforeJob, @AfterJob ... etc.

        Job                                 (The EndOfDay Job)
         |
       JobInstance  <-- a logical run       (The EndOfDay Job for 09/01/2015)
         |
       JobExecution <-- a physical run      (The first attempt at EndOfDay Job for 09/01/2015)


                Item Reader State


    When working with chunks Spring Batch steps provides specific facilities for managing states.
    These facilities make fault-tolerant use cases like retrying read starts possible.
    If we look at the peaces of how state is managed with an a step, there are three key components:

     1.               ItemStream    (this interface provides the facilities for a developer to get access
                           |            to the component where the state is maintained)
                           |
                    ExecutionContext    (that component is the execution context. the EC at itself is
                           |             really nothing more than an a labored Map. it contains key-value pairs.
                           |             that map represents a state of the particular step.
                           |             when developer writes a reader and writer, it can maintain the state
                           |             of the component (the reader and writer))
                           |
                     JobRepository      (the ExecutionContext is stored in the JobRepository
                                         the JavaRepository is the persistent data store where a state is stored
                                         for spring batch jobs)

    _______________________________________________________

    MySQL                   PostgreSQL          SQLite

    TINYINT                 SMALLINT            INTEGER
    SMALLINT                SMALLINT
    MEDIUMINT               INTEGER
    BIGINT                  BIGINT
    BIT                     BIT                 INTEGER
    _______________________________________________________

    TINYINT UNSIGNED        SMALLINT            INTEGER
    SMALLINT UNSIGNED       INTEGER
    MEDIUMINT UNSIGNED      INTEGER
    INT UNSIGNED            BIGINT
    BIGINT UNSIGNED         NUMERIC(20)
    _______________________________________________________

    DOUBLE                  DOUBLE PRECISION    REAL
    FLOAT                   REAL                REAL
    DECIMAL                 DECIMAL             REAL
    NUMERIC                 NUMERIC             REAL
    _______________________________________________________

    BOOLEAN                 BOOLEAN             INTEGER
    _______________________________________________________

    DATE                    DATE                TEXT
    TIME                    TIME
    DATETIME                TIMESTAMP

    _______________________________________________________
